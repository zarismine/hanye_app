// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	addressBookFieldNames          = builder.RawFieldNames(&AddressBook{})
	addressBookRows                = strings.Join(addressBookFieldNames, ",")
	addressBookRowsExpectAutoSet   = strings.Join(stringx.Remove(addressBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	addressBookRowsWithPlaceHolder = strings.Join(stringx.Remove(addressBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHanyeAddressBookIdPrefix = "cache:hanye:addressBook:id:"
)

type (
	addressBookModel interface {
		Insert(ctx context.Context, data *AddressBook) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AddressBook, error)
		FindAddressesByUserId(ctx context.Context, userId string) (*[]*AddressBook, error)
		GetDefaultAddress(ctx context.Context,userId string) (*AddressBook,error)
		SetDefaultAddress(ctx context.Context,userId string,addressId int64) (error)
		Update(ctx context.Context, data *AddressBook) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAddressBookModel struct {
		sqlc.CachedConn
		table string
	}

	AddressBook struct {
		Id           int64  `db:"id"`            // 主键
		UserId       string `db:"user_id"`       // 用户id
		Consignee    string `db:"consignee"`     // 收货人
		Gender       int64  `db:"gender"`        // 性别
		Phone        string `db:"phone"`         // 手机号
		ProvinceCode string `db:"province_code"` // 省级区划编号
		ProvinceName string `db:"province_name"` // 省级名称
		CityCode     string `db:"city_code"`     // 市级区划编号
		DistrictCode string `db:"district_code"` // 区级区划编号
		CityName     string `db:"city_name"`     // 市级名称
		DistrictName string `db:"district_name"` // 区级名称
		Detail       string `db:"detail"`        // 详细地址
		Label        string `db:"label"`         // 标签
		IsDefault    int64  `db:"is_default"`    // 默认 0 否 1是
	}
)

func newAddressBookModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAddressBookModel {
	return &defaultAddressBookModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`address_book`",
	}
}

func (m *defaultAddressBookModel) Delete(ctx context.Context, id int64) error {
	hanyeAddressBookIdKey := fmt.Sprintf("%s%v", cacheHanyeAddressBookIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hanyeAddressBookIdKey)
	return err
}

func (m *defaultAddressBookModel) FindOne(ctx context.Context, id int64) (*AddressBook, error) {
	hanyeAddressBookIdKey := fmt.Sprintf("%s%v", cacheHanyeAddressBookIdPrefix, id)
	var resp AddressBook
	err := m.QueryRowCtx(ctx, &resp, hanyeAddressBookIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressBookRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressBookModel) FindAddressesByUserId(ctx context.Context, userId string) (*[]*AddressBook, error) {
	var resp []*AddressBook
	query := fmt.Sprintf("select * from %s where `user_id` = ? ",  m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressBookModel) GetDefaultAddress(ctx context.Context,userId string) (*AddressBook,error) {
	var resp AddressBook
	query := fmt.Sprintf("select * from %s where `user_id` = ? and `is_default` = 1 limit 1",  m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressBookModel) SetDefaultAddress(ctx context.Context,userId string,addressId int64) (error) {
	var resp AddressBook
	query := fmt.Sprintf("select * from %s where `user_id` = ? and `is_default` = 1  limit 1",  m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, userId)
	if err == nil {
		resp.IsDefault = 0
		m.Update(ctx, &resp)
	}
	if err != nil && err != sqlc.ErrNotFound{
		return err
	}
	query = fmt.Sprintf("select * from %s where `user_id` = ? and `id` = ?  limit 1",  m.table)
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, userId, addressId)
	resp.IsDefault = 1
	m.Update(ctx, &resp)
	switch err {
	case nil:
		return nil
	case sqlc.ErrNotFound:
		return ErrNotFound
	default:
		return err
	}
}

func (m *defaultAddressBookModel) Insert(ctx context.Context, data *AddressBook) (sql.Result, error) {
	hanyeAddressBookIdKey := fmt.Sprintf("%s%v", cacheHanyeAddressBookIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, addressBookRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Consignee, data.Gender, data.Phone, data.ProvinceCode, data.ProvinceName, data.CityCode, data.DistrictCode, data.CityName, data.DistrictName, data.Detail, data.Label, data.IsDefault)
	}, hanyeAddressBookIdKey)
	return ret, err
}

func (m *defaultAddressBookModel) Update(ctx context.Context, data *AddressBook) error {
	hanyeAddressBookIdKey := fmt.Sprintf("%s%v", cacheHanyeAddressBookIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, addressBookRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Consignee, data.Gender, data.Phone, data.ProvinceCode, data.ProvinceName, data.CityCode, data.DistrictCode, data.CityName, data.DistrictName, data.Detail, data.Label, data.IsDefault, data.Id)
	}, hanyeAddressBookIdKey)
	return err
}

func (m *defaultAddressBookModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHanyeAddressBookIdPrefix, primary)
}

func (m *defaultAddressBookModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressBookRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAddressBookModel) tableName() string {
	return m.table
}
