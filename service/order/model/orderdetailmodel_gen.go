// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderDetailFieldNames          = builder.RawFieldNames(&OrderDetail{})
	orderDetailRows                = strings.Join(orderDetailFieldNames, ",")
	orderDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(orderDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(orderDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHanyeOrderDetailIdPrefix = "cache:hanye:orderDetail:id:"
)

type (
	orderDetailModel interface {
		Insert(ctx context.Context, data *OrderDetail) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderDetail, error)
		FindByOrderId(ctx context.Context, id int64) (*[]*OrderDetail, error)
		Update(ctx context.Context, data *OrderDetail) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderDetailModel struct {
		sqlc.CachedConn
		table string
	}

	OrderDetail struct {
		Id         int64   `db:"id"`          // 主键
		Name       string  `db:"name"`        // 名字
		Pic        string  `db:"pic"`         // 图片
		OrderId    int64   `db:"order_id"`    // 订单id
		DishId     int64   `db:"dish_id"`     // 菜品id
		SetmealId  int64   `db:"setmeal_id"`  // 套餐id
		DishFlavor string  `db:"dish_flavor"` // 口味
		Number     int64   `db:"number"`      // 数量
		Amount     float64 `db:"amount"`      // 金额
	}
)

func newOrderDetailModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderDetailModel {
	return &defaultOrderDetailModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_detail`",
	}
}

func (m *defaultOrderDetailModel) Delete(ctx context.Context, id int64) error {
	hanyeOrderDetailIdKey := fmt.Sprintf("%s%v", cacheHanyeOrderDetailIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hanyeOrderDetailIdKey)
	return err
}

func (m *defaultOrderDetailModel) FindOne(ctx context.Context, id int64) (*OrderDetail, error) {
	hanyeOrderDetailIdKey := fmt.Sprintf("%s%v", cacheHanyeOrderDetailIdPrefix, id)
	var resp OrderDetail
	err := m.QueryRowCtx(ctx, &resp, hanyeOrderDetailIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderDetailRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderDetailModel) FindByOrderId(ctx context.Context, id int64) (*[]*OrderDetail, error) {
	var resp []*OrderDetail
	query := fmt.Sprintf("select * from %s where `order_id` = ?",  m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderDetailModel) Insert(ctx context.Context, data *OrderDetail) (sql.Result, error) {
	hanyeOrderDetailIdKey := fmt.Sprintf("%s%v", cacheHanyeOrderDetailIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderDetailRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Pic, data.OrderId, data.DishId, data.SetmealId, data.DishFlavor, data.Number, data.Amount)
	}, hanyeOrderDetailIdKey)
	return ret, err
}

func (m *defaultOrderDetailModel) Update(ctx context.Context, data *OrderDetail) error {
	hanyeOrderDetailIdKey := fmt.Sprintf("%s%v", cacheHanyeOrderDetailIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderDetailRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Pic, data.OrderId, data.DishId, data.SetmealId, data.DishFlavor, data.Number, data.Amount, data.Id)
	}, hanyeOrderDetailIdKey)
	return err
}

func (m *defaultOrderDetailModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHanyeOrderDetailIdPrefix, primary)
}

func (m *defaultOrderDetailModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderDetailRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderDetailModel) tableName() string {
	return m.table
}
