// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"hanye/service/order/rpc/internal/logic"
	"hanye/service/order/rpc/internal/svc"
	"hanye/service/order/rpc/pb"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) GetOrderById(ctx context.Context, in *pb.GetOrderByIdReq) (*pb.GetOrderByIdResp, error) {
	l := logic.NewGetOrderByIdLogic(ctx, s.svcCtx)
	return l.GetOrderById(in)
}

func (s *OrderServer) UnPayOrderCount(ctx context.Context, in *pb.UnPayOrderCountReq) (*pb.UnPayOrderCountResp, error) {
	l := logic.NewUnPayOrderCountLogic(ctx, s.svcCtx)
	return l.UnPayOrderCount(in)
}

func (s *OrderServer) Submit(ctx context.Context, in *pb.SubmitReq) (*pb.SubmitResp, error) {
	l := logic.NewSubmitLogic(ctx, s.svcCtx)
	return l.Submit(in)
}

func (s *OrderServer) HistoryOrders(ctx context.Context, in *pb.HistoryOrdersReq) (*pb.HistoryOrdersResp, error) {
	l := logic.NewHistoryOrdersLogic(ctx, s.svcCtx)
	return l.HistoryOrders(in)
}

func (s *OrderServer) Payment(ctx context.Context, in *pb.PaymentReq) (*pb.PaymentResp, error) {
	l := logic.NewPaymentLogic(ctx, s.svcCtx)
	return l.Payment(in)
}

func (s *OrderServer) Cancel(ctx context.Context, in *pb.CancelReq) (*pb.CancelResp, error) {
	l := logic.NewCancelLogic(ctx, s.svcCtx)
	return l.Cancel(in)
}

func (s *OrderServer) ReOrder(ctx context.Context, in *pb.ReOrderReq) (*pb.ReOrderResp, error) {
	l := logic.NewReOrderLogic(ctx, s.svcCtx)
	return l.ReOrder(in)
}
