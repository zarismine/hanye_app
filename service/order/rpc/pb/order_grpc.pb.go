// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Order_GetOrderById_FullMethodName    = "/pb.order/getOrderById"
	Order_UnPayOrderCount_FullMethodName = "/pb.order/unPayOrderCount"
	Order_Submit_FullMethodName          = "/pb.order/submit"
	Order_HistoryOrders_FullMethodName   = "/pb.order/historyOrders"
	Order_Payment_FullMethodName         = "/pb.order/payment"
	Order_Cancel_FullMethodName          = "/pb.order/cancel"
	Order_ReOrder_FullMethodName         = "/pb.order/reOrder"
)

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
	UnPayOrderCount(ctx context.Context, in *UnPayOrderCountReq, opts ...grpc.CallOption) (*UnPayOrderCountResp, error)
	Submit(ctx context.Context, in *SubmitReq, opts ...grpc.CallOption) (*SubmitResp, error)
	HistoryOrders(ctx context.Context, in *HistoryOrdersReq, opts ...grpc.CallOption) (*HistoryOrdersResp, error)
	Payment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error)
	Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResp, error)
	ReOrder(ctx context.Context, in *ReOrderReq, opts ...grpc.CallOption) (*ReOrderResp, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByIdResp)
	err := c.cc.Invoke(ctx, Order_GetOrderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UnPayOrderCount(ctx context.Context, in *UnPayOrderCountReq, opts ...grpc.CallOption) (*UnPayOrderCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnPayOrderCountResp)
	err := c.cc.Invoke(ctx, Order_UnPayOrderCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Submit(ctx context.Context, in *SubmitReq, opts ...grpc.CallOption) (*SubmitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitResp)
	err := c.cc.Invoke(ctx, Order_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) HistoryOrders(ctx context.Context, in *HistoryOrdersReq, opts ...grpc.CallOption) (*HistoryOrdersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryOrdersResp)
	err := c.cc.Invoke(ctx, Order_HistoryOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Payment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResp)
	err := c.cc.Invoke(ctx, Order_Payment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelResp)
	err := c.cc.Invoke(ctx, Order_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ReOrder(ctx context.Context, in *ReOrderReq, opts ...grpc.CallOption) (*ReOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReOrderResp)
	err := c.cc.Invoke(ctx, Order_ReOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility.
type OrderServer interface {
	GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error)
	UnPayOrderCount(context.Context, *UnPayOrderCountReq) (*UnPayOrderCountResp, error)
	Submit(context.Context, *SubmitReq) (*SubmitResp, error)
	HistoryOrders(context.Context, *HistoryOrdersReq) (*HistoryOrdersResp, error)
	Payment(context.Context, *PaymentReq) (*PaymentResp, error)
	Cancel(context.Context, *CancelReq) (*CancelResp, error)
	ReOrder(context.Context, *ReOrderReq) (*ReOrderResp, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServer struct{}

func (UnimplementedOrderServer) GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServer) UnPayOrderCount(context.Context, *UnPayOrderCountReq) (*UnPayOrderCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPayOrderCount not implemented")
}
func (UnimplementedOrderServer) Submit(context.Context, *SubmitReq) (*SubmitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedOrderServer) HistoryOrders(context.Context, *HistoryOrdersReq) (*HistoryOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryOrders not implemented")
}
func (UnimplementedOrderServer) Payment(context.Context, *PaymentReq) (*PaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment not implemented")
}
func (UnimplementedOrderServer) Cancel(context.Context, *CancelReq) (*CancelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedOrderServer) ReOrder(context.Context, *ReOrderReq) (*ReOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReOrder not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}
func (UnimplementedOrderServer) testEmbeddedByValue()               {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	// If the following call pancis, it indicates UnimplementedOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrderById(ctx, req.(*GetOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UnPayOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPayOrderCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UnPayOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_UnPayOrderCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UnPayOrderCount(ctx, req.(*UnPayOrderCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Submit(ctx, req.(*SubmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_HistoryOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).HistoryOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_HistoryOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).HistoryOrders(ctx, req.(*HistoryOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Payment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Payment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_Payment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Payment(ctx, req.(*PaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Cancel(ctx, req.(*CancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ReOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ReOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Order_ReOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ReOrder(ctx, req.(*ReOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrderById",
			Handler:    _Order_GetOrderById_Handler,
		},
		{
			MethodName: "unPayOrderCount",
			Handler:    _Order_UnPayOrderCount_Handler,
		},
		{
			MethodName: "submit",
			Handler:    _Order_Submit_Handler,
		},
		{
			MethodName: "historyOrders",
			Handler:    _Order_HistoryOrders_Handler,
		},
		{
			MethodName: "payment",
			Handler:    _Order_Payment_Handler,
		},
		{
			MethodName: "cancel",
			Handler:    _Order_Cancel_Handler,
		},
		{
			MethodName: "reOrder",
			Handler:    _Order_ReOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
