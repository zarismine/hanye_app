// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package order

import (
	"context"

	"hanye/service/order/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelReq           = pb.CancelReq
	CancelResp          = pb.CancelResp
	GetOrderByIdReq     = pb.GetOrderByIdReq
	GetOrderByIdResp    = pb.GetOrderByIdResp
	HistoryOrdersReq    = pb.HistoryOrdersReq
	HistoryOrdersResp   = pb.HistoryOrdersResp
	Order               = pb.Order
	OrderDetail         = pb.OrderDetail
	OrderWithDetail     = pb.OrderWithDetail
	PaymentReq          = pb.PaymentReq
	PaymentResp         = pb.PaymentResp
	ReOrderReq          = pb.ReOrderReq
	ReOrderResp         = pb.ReOrderResp
	SubmitReq           = pb.SubmitReq
	SubmitResp          = pb.SubmitResp
	UnPayOrderCountReq  = pb.UnPayOrderCountReq
	UnPayOrderCountResp = pb.UnPayOrderCountResp

	OrderZrpcClient interface {
		GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
		UnPayOrderCount(ctx context.Context, in *UnPayOrderCountReq, opts ...grpc.CallOption) (*UnPayOrderCountResp, error)
		Submit(ctx context.Context, in *SubmitReq, opts ...grpc.CallOption) (*SubmitResp, error)
		HistoryOrders(ctx context.Context, in *HistoryOrdersReq, opts ...grpc.CallOption) (*HistoryOrdersResp, error)
		Payment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error)
		Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResp, error)
		ReOrder(ctx context.Context, in *ReOrderReq, opts ...grpc.CallOption) (*ReOrderResp, error)
	}

	defaultOrderZrpcClient struct {
		cli zrpc.Client
	}
)

func NewOrderZrpcClient(cli zrpc.Client) OrderZrpcClient {
	return &defaultOrderZrpcClient{
		cli: cli,
	}
}

func (m *defaultOrderZrpcClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) UnPayOrderCount(ctx context.Context, in *UnPayOrderCountReq, opts ...grpc.CallOption) (*UnPayOrderCountResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.UnPayOrderCount(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) Submit(ctx context.Context, in *SubmitReq, opts ...grpc.CallOption) (*SubmitResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Submit(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) HistoryOrders(ctx context.Context, in *HistoryOrdersReq, opts ...grpc.CallOption) (*HistoryOrdersResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.HistoryOrders(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) Payment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Payment(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) Cancel(ctx context.Context, in *CancelReq, opts ...grpc.CallOption) (*CancelResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Cancel(ctx, in, opts...)
}

func (m *defaultOrderZrpcClient) ReOrder(ctx context.Context, in *ReOrderReq, opts ...grpc.CallOption) (*ReOrderResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.ReOrder(ctx, in, opts...)
}
