// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dishFlavorFieldNames          = builder.RawFieldNames(&DishFlavor{})
	dishFlavorRows                = strings.Join(dishFlavorFieldNames, ",")
	dishFlavorRowsExpectAutoSet   = strings.Join(stringx.Remove(dishFlavorFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dishFlavorRowsWithPlaceHolder = strings.Join(stringx.Remove(dishFlavorFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHanyeDishFlavorIdPrefix = "cache:hanye:dishFlavor:id:"
	cacheHanyeDishFlavorDishIdPrefix = "cache:hanye:dishFlavor:dishid:"
)

type (
	dishFlavorModel interface {
		Insert(ctx context.Context, data *DishFlavor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DishFlavor, error)
		FindByDishId(ctx context.Context,dishId int64) (*[]*DishFlavor, error)
		Update(ctx context.Context, data *DishFlavor) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDishFlavorModel struct {
		sqlc.CachedConn
		table string
	}

	DishFlavor struct {
		Id     int64  `db:"id"`
		Name   string `db:"name"`
		List   string `db:"list"`
		DishId int64  `db:"dish_id"`
	}
)

func newDishFlavorModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDishFlavorModel {
	return &defaultDishFlavorModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dish_flavor`",
	}
}

func (m *defaultDishFlavorModel) Delete(ctx context.Context, id int64) error {
	hanyeDishFlavorIdKey := fmt.Sprintf("%s%v", cacheHanyeDishFlavorIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hanyeDishFlavorIdKey)
	return err
}

func (m *defaultDishFlavorModel) FindOne(ctx context.Context, id int64) (*DishFlavor, error) {
	hanyeDishFlavorIdKey := fmt.Sprintf("%s%v", cacheHanyeDishFlavorIdPrefix, id)
	var resp DishFlavor
	err := m.QueryRowCtx(ctx, &resp, hanyeDishFlavorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dishFlavorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDishFlavorModel) FindByDishId(ctx context.Context,dishId int64) (*[]*DishFlavor, error) {
	hanyeDishFlavorDishIdKey := fmt.Sprintf("%s%v", cacheHanyeDishFlavorDishIdPrefix, dishId)
	var resp []*DishFlavor
	m.GetCacheCtx(ctx, hanyeDishFlavorDishIdKey, &resp)
	if len(resp) != 0 {
		return &resp, nil
	}
	query := fmt.Sprintf("select * from %s where `dish_id` = ?",  m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, dishId)
	switch err {
	case nil:
		m.SetCacheCtx(ctx, hanyeDishFlavorDishIdKey, resp)
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDishFlavorModel) Insert(ctx context.Context, data *DishFlavor) (sql.Result, error) {
	hanyeDishFlavorIdKey := fmt.Sprintf("%s%v", cacheHanyeDishFlavorIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, dishFlavorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.List, data.DishId)
	}, hanyeDishFlavorIdKey)
	return ret, err
}

func (m *defaultDishFlavorModel) Update(ctx context.Context, data *DishFlavor) error {
	hanyeDishFlavorIdKey := fmt.Sprintf("%s%v", cacheHanyeDishFlavorIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dishFlavorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.List, data.DishId, data.Id)
	}, hanyeDishFlavorIdKey)
	return err
}

func (m *defaultDishFlavorModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHanyeDishFlavorIdPrefix, primary)
}

func (m *defaultDishFlavorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dishFlavorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDishFlavorModel) tableName() string {
	return m.table
}
