// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	setmealFieldNames          = builder.RawFieldNames(&Setmeal{})
	setmealRows                = strings.Join(setmealFieldNames, ",")
	setmealRowsExpectAutoSet   = strings.Join(stringx.Remove(setmealFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	setmealRowsWithPlaceHolder = strings.Join(stringx.Remove(setmealFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHanyeSetmealIdPrefix   = "cache:hanye:setmeal:id:"
	cacheHanyeSetmealNamePrefix = "cache:hanye:setmeal:name:"
	cacheHanyeSetmealCategoryIdPrefix = "cache:hanye:setmeal:categoryid:"
)

type (
	setmealModel interface {
		Insert(ctx context.Context, data *Setmeal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Setmeal, error)
		FindOneByName(ctx context.Context, name string) (*Setmeal, error)
		FindDetailById(ctx context.Context, id int64) (string, error)
		FindSetmealsByCategoryId(ctx context.Context, categoryId int64) (*[]*Setmeal, error)
		Update(ctx context.Context, data *Setmeal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSetmealModel struct {
		sqlc.CachedConn
		table string
	}

	Setmeal struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"`
		Pic        string    `db:"pic"`
		Detail     string    `db:"detail"`
		Price      float64   `db:"price"`
		Status     int64     `db:"status"`
		CategoryId int64     `db:"category_id"`
		CreateUser int64     `db:"create_user"`
		UpdateUser int64     `db:"update_user"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newSetmealModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSetmealModel {
	return &defaultSetmealModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`setmeal`",
	}
}

func (m *defaultSetmealModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	hanyeSetmealIdKey := fmt.Sprintf("%s%v", cacheHanyeSetmealIdPrefix, id)
	hanyeSetmealNameKey := fmt.Sprintf("%s%v", cacheHanyeSetmealNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hanyeSetmealIdKey, hanyeSetmealNameKey)
	return err
}

func (m *defaultSetmealModel) FindOne(ctx context.Context, id int64) (*Setmeal, error) {
	hanyeSetmealIdKey := fmt.Sprintf("%s%v", cacheHanyeSetmealIdPrefix, id)
	var resp Setmeal
	err := m.QueryRowCtx(ctx, &resp, hanyeSetmealIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", setmealRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSetmealModel) FindOneByName(ctx context.Context, name string) (*Setmeal, error) {
	hanyeSetmealNameKey := fmt.Sprintf("%s%v", cacheHanyeSetmealNamePrefix, name)
	var resp Setmeal
	err := m.QueryRowIndexCtx(ctx, &resp, hanyeSetmealNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", setmealRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSetmealModel) FindDetailById(ctx context.Context, id int64) (string, error) {
	setmeal, err := m.FindOne(ctx, id)
	if err != nil {
		return "", ErrNotFound
	}
	return setmeal.Detail, nil
}

func (m *defaultSetmealModel) FindSetmealsByCategoryId(ctx context.Context, categoryId int64) (*[]*Setmeal, error) {
	hanyeSetmealCategoryKey := fmt.Sprintf("%s%v", cacheHanyeSetmealCategoryIdPrefix, categoryId)
	var resp []*Setmeal
	m.GetCacheCtx(ctx, hanyeSetmealCategoryKey, &resp)
	if len(resp) != 0 {
		return &resp, nil
	}
	query := fmt.Sprintf("select * from %s where `category_id` = ?",  m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		m.SetCacheCtx(ctx, hanyeSetmealCategoryKey, resp)
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSetmealModel) Insert(ctx context.Context, data *Setmeal) (sql.Result, error) {
	hanyeSetmealIdKey := fmt.Sprintf("%s%v", cacheHanyeSetmealIdPrefix, data.Id)
	hanyeSetmealNameKey := fmt.Sprintf("%s%v", cacheHanyeSetmealNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, setmealRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Pic, data.Detail, data.Price, data.Status, data.CategoryId, data.CreateUser, data.UpdateUser)
	}, hanyeSetmealIdKey, hanyeSetmealNameKey)
	return ret, err
}

func (m *defaultSetmealModel) Update(ctx context.Context, newData *Setmeal) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	hanyeSetmealIdKey := fmt.Sprintf("%s%v", cacheHanyeSetmealIdPrefix, data.Id)
	hanyeSetmealNameKey := fmt.Sprintf("%s%v", cacheHanyeSetmealNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, setmealRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Pic, newData.Detail, newData.Price, newData.Status, newData.CategoryId, newData.CreateUser, newData.UpdateUser, newData.Id)
	}, hanyeSetmealIdKey, hanyeSetmealNameKey)
	return err
}

func (m *defaultSetmealModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHanyeSetmealIdPrefix, primary)
}

func (m *defaultSetmealModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", setmealRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSetmealModel) tableName() string {
	return m.table
}
