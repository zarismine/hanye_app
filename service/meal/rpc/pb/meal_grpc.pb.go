// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: meal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Meal_GetCategoryList_FullMethodName         = "/pb.meal/getCategoryList"
	Meal_GetSetmealsByCategoryId_FullMethodName = "/pb.meal/getSetmealsByCategoryId"
	Meal_GetSetmealsById_FullMethodName         = "/pb.meal/getSetmealsById"
	Meal_GetDishSimplesById_FullMethodName      = "/pb.meal/getDishSimplesById"
	Meal_GetDishesByCategoryId_FullMethodName   = "/pb.meal/getDishesByCategoryId"
	Meal_GetDishesById_FullMethodName           = "/pb.meal/getDishesById"
)

// MealClient is the client API for Meal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealClient interface {
	GetCategoryList(ctx context.Context, in *GetCategoryListReq, opts ...grpc.CallOption) (*GetCategoryListResp, error)
	GetSetmealsByCategoryId(ctx context.Context, in *GetSetmealsByCategoryIdReq, opts ...grpc.CallOption) (*GetSetmealsByCategoryIdResp, error)
	GetSetmealsById(ctx context.Context, in *GetSetmealsByIdReq, opts ...grpc.CallOption) (*GetSetmealsByIdResp, error)
	GetDishSimplesById(ctx context.Context, in *GetDishSimplesByIdReq, opts ...grpc.CallOption) (*GetDishSimplesByIdResp, error)
	GetDishesByCategoryId(ctx context.Context, in *GetDishesByCategoryIdReq, opts ...grpc.CallOption) (*GetDishesByCategoryIdResp, error)
	GetDishesById(ctx context.Context, in *GetDishesByIdReq, opts ...grpc.CallOption) (*GetDishesByIdResp, error)
}

type mealClient struct {
	cc grpc.ClientConnInterface
}

func NewMealClient(cc grpc.ClientConnInterface) MealClient {
	return &mealClient{cc}
}

func (c *mealClient) GetCategoryList(ctx context.Context, in *GetCategoryListReq, opts ...grpc.CallOption) (*GetCategoryListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryListResp)
	err := c.cc.Invoke(ctx, Meal_GetCategoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) GetSetmealsByCategoryId(ctx context.Context, in *GetSetmealsByCategoryIdReq, opts ...grpc.CallOption) (*GetSetmealsByCategoryIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSetmealsByCategoryIdResp)
	err := c.cc.Invoke(ctx, Meal_GetSetmealsByCategoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) GetSetmealsById(ctx context.Context, in *GetSetmealsByIdReq, opts ...grpc.CallOption) (*GetSetmealsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSetmealsByIdResp)
	err := c.cc.Invoke(ctx, Meal_GetSetmealsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) GetDishSimplesById(ctx context.Context, in *GetDishSimplesByIdReq, opts ...grpc.CallOption) (*GetDishSimplesByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishSimplesByIdResp)
	err := c.cc.Invoke(ctx, Meal_GetDishSimplesById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) GetDishesByCategoryId(ctx context.Context, in *GetDishesByCategoryIdReq, opts ...grpc.CallOption) (*GetDishesByCategoryIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishesByCategoryIdResp)
	err := c.cc.Invoke(ctx, Meal_GetDishesByCategoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) GetDishesById(ctx context.Context, in *GetDishesByIdReq, opts ...grpc.CallOption) (*GetDishesByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDishesByIdResp)
	err := c.cc.Invoke(ctx, Meal_GetDishesById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealServer is the server API for Meal service.
// All implementations must embed UnimplementedMealServer
// for forward compatibility.
type MealServer interface {
	GetCategoryList(context.Context, *GetCategoryListReq) (*GetCategoryListResp, error)
	GetSetmealsByCategoryId(context.Context, *GetSetmealsByCategoryIdReq) (*GetSetmealsByCategoryIdResp, error)
	GetSetmealsById(context.Context, *GetSetmealsByIdReq) (*GetSetmealsByIdResp, error)
	GetDishSimplesById(context.Context, *GetDishSimplesByIdReq) (*GetDishSimplesByIdResp, error)
	GetDishesByCategoryId(context.Context, *GetDishesByCategoryIdReq) (*GetDishesByCategoryIdResp, error)
	GetDishesById(context.Context, *GetDishesByIdReq) (*GetDishesByIdResp, error)
	mustEmbedUnimplementedMealServer()
}

// UnimplementedMealServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealServer struct{}

func (UnimplementedMealServer) GetCategoryList(context.Context, *GetCategoryListReq) (*GetCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedMealServer) GetSetmealsByCategoryId(context.Context, *GetSetmealsByCategoryIdReq) (*GetSetmealsByCategoryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetmealsByCategoryId not implemented")
}
func (UnimplementedMealServer) GetSetmealsById(context.Context, *GetSetmealsByIdReq) (*GetSetmealsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetmealsById not implemented")
}
func (UnimplementedMealServer) GetDishSimplesById(context.Context, *GetDishSimplesByIdReq) (*GetDishSimplesByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishSimplesById not implemented")
}
func (UnimplementedMealServer) GetDishesByCategoryId(context.Context, *GetDishesByCategoryIdReq) (*GetDishesByCategoryIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishesByCategoryId not implemented")
}
func (UnimplementedMealServer) GetDishesById(context.Context, *GetDishesByIdReq) (*GetDishesByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishesById not implemented")
}
func (UnimplementedMealServer) mustEmbedUnimplementedMealServer() {}
func (UnimplementedMealServer) testEmbeddedByValue()              {}

// UnsafeMealServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealServer will
// result in compilation errors.
type UnsafeMealServer interface {
	mustEmbedUnimplementedMealServer()
}

func RegisterMealServer(s grpc.ServiceRegistrar, srv MealServer) {
	// If the following call pancis, it indicates UnimplementedMealServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Meal_ServiceDesc, srv)
}

func _Meal_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetCategoryList(ctx, req.(*GetCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_GetSetmealsByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetmealsByCategoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetSetmealsByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetSetmealsByCategoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetSetmealsByCategoryId(ctx, req.(*GetSetmealsByCategoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_GetSetmealsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetmealsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetSetmealsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetSetmealsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetSetmealsById(ctx, req.(*GetSetmealsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_GetDishSimplesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishSimplesByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetDishSimplesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetDishSimplesById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetDishSimplesById(ctx, req.(*GetDishSimplesByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_GetDishesByCategoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishesByCategoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetDishesByCategoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetDishesByCategoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetDishesByCategoryId(ctx, req.(*GetDishesByCategoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_GetDishesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDishesByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).GetDishesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_GetDishesById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).GetDishesById(ctx, req.(*GetDishesByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Meal_ServiceDesc is the grpc.ServiceDesc for Meal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.meal",
	HandlerType: (*MealServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCategoryList",
			Handler:    _Meal_GetCategoryList_Handler,
		},
		{
			MethodName: "getSetmealsByCategoryId",
			Handler:    _Meal_GetSetmealsByCategoryId_Handler,
		},
		{
			MethodName: "getSetmealsById",
			Handler:    _Meal_GetSetmealsById_Handler,
		},
		{
			MethodName: "getDishSimplesById",
			Handler:    _Meal_GetDishSimplesById_Handler,
		},
		{
			MethodName: "getDishesByCategoryId",
			Handler:    _Meal_GetDishesByCategoryId_Handler,
		},
		{
			MethodName: "getDishesById",
			Handler:    _Meal_GetDishesById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meal.proto",
}
